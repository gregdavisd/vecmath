/*
 * Copyright Gregery Barton
 * All rights reserved
 */
package javax.vecmath;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.Stream.Builder;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Gregery Barton
 */
public class Matrix3fTest {

	private static final int MATRIX_COUNT = 120;

	static final float[] x_rotation = new float[MATRIX_COUNT * 16];
	static final float[] y_rotation = new float[MATRIX_COUNT * 16];
	static final float[] z_rotation = new float[MATRIX_COUNT * 16];
	static final float[] xy_rotation = new float[MATRIX_COUNT * 16];
	static final float[] xz_rotation = new float[MATRIX_COUNT * 16];
	static final float[] yx_rotation = new float[MATRIX_COUNT * 16];
	static final float[] yz_rotation = new float[MATRIX_COUNT * 16];
	static final float[] zx_rotation = new float[MATRIX_COUNT * 16];
	static final float[] zy_rotation = new float[MATRIX_COUNT * 16];

	static final float[] scale_x_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_y_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_z_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_xy_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_xz_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_yx_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_yz_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_zx_rotation = new float[MATRIX_COUNT * 16];
	static final float[] scale_zy_rotation = new float[MATRIX_COUNT * 16];
	static final float[] bork = new float[]{0.13597837090492249f, -1.0062823321277392e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 1.8193299770355225f, 1.8218742609024048f, -0.09615039080381393f, -0.0001049041748046875f,
		-1.8193341493606567f, 1.821868658065796f, 0.09615204483270645f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.1359783560037613f, -1.0147738294108422e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.8346822261810303f,
		1.8063697814941406f, -0.09696175903081894f, -0.0001049041748046875f, -1.8038514852523804f, 1.8372423648834229f,
		0.09533378481864929f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359783411026001f, -1.0233344482912798e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 1.8501592874526978f, 1.790469765663147f, -0.09777971357107162f,
		-0.0001049041748046875f, -1.7879735231399536f, 1.8527411222457886f, 0.09449464827775955f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.1359783411026001f, -1.0319620287191356e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		1.8657578229904175f, 1.774163842201233f, -0.09860407561063766f, -0.0001049041748046875f, -1.7716902494430542f,
		1.868361473083496f, 0.09363408386707306f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359783262014389f,
		-1.0406542969576549e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.881473422050476f, 1.7574419975280762f,
		-0.09943462908267975f, -0.0001049041748046875f, -1.754991888999939f, 1.884099006652832f, 0.09275158494710922f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359783262014389f, -1.0494088655832456e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 1.897301435470581f, 1.7402946949005127f, -0.10027112811803818f, -0.0001049041748046875f,
		-1.737868309020996f, 1.8999489545822144f, 0.09184662252664566f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.1359783113002777f, -1.058222778738127e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.9132366180419922f,
		1.7227110862731934f, -0.10111330449581146f, -0.0001049041748046875f, -1.7203093767166138f, 1.9159064292907715f,
		0.0909186378121376f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597829639911652f, -1.0670931942513562e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 1.9292738437652588f, 1.704681158065796f, -0.10196086019277573f,
		-0.0001049041748046875f, -1.702304720878601f, 1.9319663047790527f, 0.08996709436178207f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597829639911652f, -1.076016360457288e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		1.9454072713851929f, 1.6861945390701294f, -0.10281349718570709f, -0.0001049041748046875f, -1.683843731880188f,
		1.9481216669082642f, 0.08899145573377609f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597828149795532f,
		-1.084989321498142e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.9616297483444214f, 1.667241096496582f,
		-0.10367085039615631f, -0.0001049041748046875f, -1.6649165153503418f, 1.964367151260376f, 0.08799117058515549f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597829639911652f, -1.0940078709609224e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 1.9779350757598877f, 1.6478102207183838f, -0.10453256964683533f, -0.0001049041748046875f,
		-1.6455127000808716f, 1.9806950092315674f, 0.08696568757295609f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597826659679413f, -1.103067575058958e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.9943147897720337f,
		1.6278916597366333f, -0.10539823025465012f, -0.0001049041748046875f, -1.6256221532821655f, 1.9970977306365967f,
		0.08591447025537491f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597825169563293f, -1.1121645684397663e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.0107617378234863f, 1.6074751615524292f, -0.10626744478940964f,
		-0.0001049041748046875f, -1.6052337884902954f, 2.0135676860809326f, 0.08483698219060898f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597823679447174f, -1.1212933941351366e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.027266502380371f, 1.5865505933761597f, -0.10713972896337509f, -0.0001049041748046875f, -1.5843385457992554f,
		2.030095338821411f, 0.08373267203569412f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597823679447174f,
		-1.1304495046715601e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.04382061958313f, 1.5651077032089233f,
		-0.10801458358764648f, -0.0001049041748046875f, -1.5629254579544067f, 2.0466725826263428f, 0.08260100334882736f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597822189331055f, -1.139627102020313e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.060413360595703f, 1.543136715888977f, -0.10889149457216263f, -0.0001049041748046875f,
		-1.5409854650497437f, 2.063288450241089f, 0.0814414769411087f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597820699214935f, -1.1488202744658338e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.0770347118377686f,
		1.5206280946731567f, -0.10976991057395935f, -0.0001049041748046875f, -1.5185081958770752f, 2.079932689666748f,
		0.08025357127189636f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597819209098816f, -1.1580228829188854e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.093672513961792f, 1.4975723028182983f, -0.1106492355465889f,
		-0.0001049041748046875f, -1.495484471321106f, 2.0965940952301025f, 0.07903679460287094f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597817718982697f, -1.1672285609165556e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.110316276550293f, 1.4739601612091064f, -0.11152882874011993f, -0.0001049041748046875f, -1.4719051122665405f,
		2.1132609844207764f, 0.07779063284397125f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597817718982697f,
		-1.1764301461880677e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.1269524097442627f, 1.4497826099395752f,
		-0.11240804940462112f, -0.0001049041748046875f, -1.4477612972259521f, 2.129920244216919f, 0.07651466131210327f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597814738750458f, -1.18562024908897e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.1435680389404297f, 1.4250315427780151f, -0.11328616738319397f, -0.0001049041748046875f,
		-1.4230446815490723f, 2.146559000015259f, 0.0752084031701088f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597813248634338f, -1.1947913662879728e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.1601486206054688f,
		1.3996984958648682f, -0.11416244506835938f, -0.0001049041748046875f, -1.3977470397949219f, 2.16316294670105f,
		0.0738714337348938f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359781175851822f, -1.2039348575854092e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.176680088043213f, 1.3737764358520508f, -0.11503612250089645f,
		-0.0001049041748046875f, -1.371861219406128f, 2.1797173023223877f, 0.07250338047742844f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.135978102684021f, -1.2130425375289633e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.1931467056274414f, 1.3472580909729004f, -0.11590636521577835f, -0.0001049041748046875f, -1.3453797101974487f,
		2.196207046508789f, 0.07110385596752167f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359780877828598f,
		-1.2221057659189682e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.2095327377319336f, 1.3201367855072021f,
		-0.11677234619855881f, -0.0001049041748046875f, -1.3182963132858276f, 2.212615728378296f, 0.06967251002788544f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359780728816986f, -1.23111476568738e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.225820779800415f, 1.2924073934555054f, -0.1176331415772438f, -0.0001049041748046875f,
		-1.2906055450439453f, 2.228926181793213f, 0.06820908188819885f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597804307937622f, -1.2400598734529922e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.241992950439453f,
		1.2640646696090698f, -0.11848785728216171f, -0.0001049041748046875f, -1.2623023986816406f, 2.245121479034424f,
		0.06671326607465744f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597805798053741f, -1.2489309710872476e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.2580316066741943f, 1.2351044416427612f, -0.11933549493551254f,
		-0.0001049041748046875f, -1.2333823442459106f, 2.2611827850341797f, 0.06518486887216568f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597802817821503f, -1.2577178267747513e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.2739179134368896f, 1.205523133277893f, -0.1201750636100769f, -0.0001049041748046875f, -1.2038424015045166f,
		2.2770910263061523f, 0.06362370401620865f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597801327705383f,
		-1.2664091855185688e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.2896316051483154f, 1.1753190755844116f,
		-0.12100553512573242f, -0.0001049041748046875f, -1.1736805438995361f, 2.2928266525268555f, 0.062029674649238586f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597798347473145f, -1.2749942470691167e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.3051533699035645f, 1.1444902420043945f, -0.12182583659887314f, -0.0001049041748046875f,
		-1.1428946256637573f, 2.3083698749542236f, 0.060402657836675644f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597798347473145f, -1.283461074308434e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.3204612731933594f,
		1.1130369901657104f, -0.12263484299182892f, -0.0001049041748046875f, -1.111485242843628f, 2.3236989974975586f,
		0.0587426982820034f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597795367240906f, -1.2917984122395865e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.3355348110198975f, 1.080959439277649f, -0.12343147397041321f,
		-0.0001049041748046875f, -1.079452395439148f, 2.338793992996216f, 0.05704977735877037f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597792387008667f, -1.2999937553104246e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.350351333618164f, 1.0482603311538696f, -0.1242145225405693f, -0.0001049041748046875f, -1.046798825263977f,
		2.3536312580108643f, 0.05532405897974968f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597792387008667f,
		-1.3080344842819613e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.36488938331604f, 1.0149426460266113f,
		-0.12498285621404648f, -0.0001049041748046875f, -1.013527512550354f, 2.3681893348693848f, 0.05356569588184357f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597789406776428f, -1.3159087757230736e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.3791253566741943f, 0.9810113310813904f, -0.12573520839214325f, -0.0001049041748046875f,
		-0.9796435236930847f, 2.3824455738067627f, 0.051774945110082626f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.1359778791666031f, -1.3236032145869103e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.3930370807647705f,
		0.9464721083641052f, -0.1264704167842865f, -0.0001049041748046875f, -0.9451524615287781f, 2.396376371383667f,
		0.04995211586356163f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359778791666031f, -1.3311051816344843e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.4066004753112793f, 0.9113330841064453f, -0.12718725204467773f,
		-0.0001049041748046875f, -0.910062313079834f, 2.409958600997925f, 0.048097625374794006f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.1359778493642807f, -1.338401830253133e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.419792413711548f, 0.8756030201911926f, -0.12788443267345428f, -0.0001049041748046875f, -0.8743821978569031f,
		2.4231691360473633f, 0.046211954206228256f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359778195619583f,
		-1.3454800864565186e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.432589530944824f, 0.839292585849762f,
		-0.12856075167655945f, -0.0001049041748046875f, -0.8381223678588867f, 2.435983896255493f, 0.04429563879966736f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359778195619583f, -1.352326421510952e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.44496750831604f, 0.8024140000343323f, -0.12921491265296936f, -0.0001049041748046875f,
		-0.8012951612472534f, 2.4483792781829834f, 0.042349349707365036f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597777485847473f, -1.3589281024906086e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.4569034576416016f,
		0.764981210231781f, -0.1298457384109497f, -0.0001049041748046875f, -0.7639146447181702f, 2.460331678390503f,
		0.04037381336092949f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597775995731354f, -1.365272510156501e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.468374013900757f, 0.7270094752311707f, -0.13045194745063782f,
		-0.0001049041748046875f, -0.7259958386421204f, 2.471818447113037f, 0.03836982697248459f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597774505615234f, -1.3713469115828048e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.479356050491333f, 0.6885162591934204f, -0.13103234767913818f, -0.0001049041748046875f, -0.6875562071800232f,
		2.482816219329834f, 0.03633832186460495f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597773015499115f,
		-1.377138460156857e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.4898273944854736f, 0.649519681930542f,
		-0.1315857172012329f, -0.0001049041748046875f, -0.6486139893531799f, 2.4933016300201416f, 0.03428025171160698f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597770035266876f, -1.3826353324475349e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.499765634536743f, 0.6100406646728516f, -0.13211095333099365f, -0.0001049041748046875f,
		-0.6091901659965515f, 2.503253698348999f, 0.03219672292470932f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597767055034637f, -1.3878257050237153e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.5091495513916016f,
		0.5701011419296265f, -0.1326068937778473f, -0.0001049041748046875f, -0.5693062543869019f, 2.512650966644287f,
		0.030088888481259346f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.135977640748024f, -1.3926980955147883e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.517958402633667f, 0.5297248363494873f, -0.13307243585586548f,
		-0.0001049041748046875f, -0.5289862751960754f, 2.5214719772338867f, 0.027958005666732788f, -0.015026889741420746f,
		0.0f, 0.0f, 0.0f, 1.0f, 0.135977640748024f, -1.3972413626106572e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.526172637939453f, 0.48893702030181885f, -0.13350655138492584f, -0.0001049041748046875f, -0.48825526237487793f,
		2.529697895050049f, 0.02580539882183075f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359776258468628f,
		-1.4014451608090894e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.533773183822632f, 0.44776421785354614f,
		-0.1339082419872284f, -0.0001049041748046875f, -0.4471399188041687f, 2.537308931350708f, 0.02363247610628605f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359775811433792f, -1.405300054102554e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.5407426357269287f, 0.4062348008155823f, -0.1342765837907791f, -0.0001049041748046875f,
		-0.40566834807395935f, 2.544288158416748f, 0.02144072763621807f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597756624221802f, -1.4087969475440332e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.547065019607544f,
		0.3643782138824463f, -0.13461069762706757f, -0.0001049041748046875f, -0.3638700842857361f, 2.550619125366211f,
		0.01923171989619732f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597753643989563f, -1.4119272009338601e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.5527243614196777f, 0.322224885225296f, -0.13490980863571167f,
		-0.0001049041748046875f, -0.32177555561065674f, 2.556286573410034f, 0.017007051035761833f, -0.015026889741420746f,
		0.0f, 0.0f, 0.0f, 1.0f, 0.13597752153873444f, -1.414683424627583e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.5577075481414795f, 0.2798069417476654f, -0.13517315685749054f, -0.0001049041748046875f, -0.2794167995452881f,
		2.56127667427063f, 0.014768416993319988f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597749173641205f,
		-1.4170586837281007e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.562001943588257f, 0.23715797066688538f,
		-0.13540011644363403f, -0.0001049041748046875f, -0.2368272989988327f, 2.5655770301818848f, 0.012517590075731277f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597746193408966f, -1.4190472938935272e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.5655972957611084f, 0.19431108236312866f, -0.13559012115001678f, -0.0001049041748046875f,
		-0.19404011964797974f, 2.5691773891448975f, 0.010256316512823105f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597746193408966f, -1.420644139216165e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.5684845447540283f,
		0.1513018161058426f, -0.13574272394180298f, -0.0001049041748046875f, -0.1510908156633377f, 2.572068452835083f,
		0.007986475713551044f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597741723060608f, -1.421845581717207e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.5706562995910645f, 0.1081652119755745f, -0.135857492685318f,
		-0.0001049041748046875f, -0.10801435261964798f, 2.5742435455322266f, 0.0057099126279354095f, -0.015026889741420746f,
		0.0f, 0.0f, 0.0f, 1.0f, 0.13597741723060608f, -1.4226478697310085e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.5721075534820557f, 0.06493711471557617f, -0.13593417406082153f, -0.0001049041748046875f, -0.06484650820493698f,
		2.5756964683532715f, 0.0034285206347703934f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359773725271225f,
		-1.4230497527023545e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.572833776473999f, 0.021654468029737473f,
		-0.13597257435321808f, -0.0001049041748046875f, -0.021624203771352768f, 2.5764236450195312f, 0.0011442499235272408f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359773576259613f, -1.4230497527023545e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.572833776473999f, -0.021646885201334953f, -0.13597257435321808f, -0.0001049041748046875f,
		0.021616782993078232f, 2.5764241218566895f, -0.0011410077568143606f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597732782363892f, -1.422648097104684e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.5721075534820557f,
		-0.06492983549833298f, -0.13593418896198273f, -0.0001049041748046875f, 0.06483940035104752f, 2.5756967067718506f,
		-0.0034252943005412817f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597731292247772f, -1.421845581717207e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.5706565380096436f, -0.10815795511007309f, -0.135857492685318f,
		-0.0001049041748046875f, 0.10800725221633911f, 2.5742437839508057f, -0.005706686060875654f, -0.015026889741420746f,
		0.0f, 0.0f, 0.0f, 1.0f, 0.13597726821899414f, -1.420644593963516e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.5684850215911865f, -0.15129457414150238f, -0.13574273884296417f, -0.0001049041748046875f, 0.15108372271060944f,
		2.5720691680908203f, -0.007983249612152576f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597725331783295f,
		-1.4190475212672027e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.5655977725982666f, -0.19430384039878845f,
		-0.13559015095233917f, -0.0001049041748046875f, 0.19403302669525146f, 2.5691778659820557f, -0.010253092274069786f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597722351551056f, -1.417059024788614e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.562002658843994f, -0.23715072870254517f, -0.13540014624595642f, -0.0001049041748046875f,
		0.23682017624378204f, 2.565577507019043f, -0.012514367699623108f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597720861434937f, -1.4146835383144207e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.557708263397217f,
		-0.2797996699810028f, -0.13517320156097412f, -0.0001049041748046875f, 0.27940964698791504f, 2.561277389526367f,
		-0.014765194617211819f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597719371318817f, -1.4119275419943733e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.552725315093994f, -0.3222176134586334f, -0.13490985333919525f,
		-0.0001049041748046875f, 0.32176852226257324f, 2.5562870502471924f, -0.017003826797008514f, -0.015026889741420746f,
		0.0f, 0.0f, 0.0f, 1.0f, 0.1359771490097046f, -1.4087972886045463e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.5470659732818604f, -0.3643706440925598f, -0.13461075723171234f, -0.0001049041748046875f, 0.3638627529144287f,
		2.5506200790405273f, -0.019228482618927956f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359771490097046f,
		-1.4053007362235803e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.5407440662384033f, -0.4062275290489197f,
		-0.1342766433954239f, -0.0001049041748046875f, 0.40566137433052063f, 2.5442893505096436f, -0.0214375089854002f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359771192073822f, -1.4014459566169535e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.5337746143341064f, -0.4477570056915283f, -0.13390830159187317f, -0.0001049041748046875f,
		0.4471328854560852f, 2.5373101234436035f, -0.02362925373017788f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597708940505981f, -1.3972420447316836e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.5261738300323486f,
		-0.4889298677444458f, -0.13350661098957062f, -0.0001049041748046875f, 0.4882483184337616f, 2.5296988487243652f,
		-0.02580217644572258f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597707450389862f, -1.392698663948977e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.5179598331451416f, -0.529717743396759f, -0.13307252526283264f,
		-0.0001049041748046875f, 0.5289793610572815f, 2.5214731693267822f, -0.02795478329062462f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597704470157623f, -1.387826614518417e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.5091512203216553f, -0.5700938105583191f, -0.13260698318481445f, -0.0001049041748046875f, 0.5692991018295288f,
		2.5126523971557617f, -0.03008565492928028f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597701489925385f,
		-1.3826362419422367e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.4997670650482178f, -0.6100336313247681f,
		-0.13211104273796082f, -0.0001049041748046875f, 0.6091832518577576f, 2.5032553672790527f, -0.03219350799918175f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597701489925385f, -1.3771395970252343e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.4898290634155273f, -0.6495122909545898f, -0.13158582150936127f, -0.0001049041748046875f,
		0.6486068964004517f, 2.4933037757873535f, -0.03427702188491821f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597698509693146f, -1.3713478210775065e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.479358196258545f,
		-0.6885092258453369f, -0.13103245198726654f, -0.0001049041748046875f, 0.6875494718551636f, 2.4828178882598877f,
		-0.03633510693907738f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597695529460907f, -1.3652736470248783e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.468376398086548f, -0.7270022034645081f, -0.13045205175876617f,
		-0.0001049041748046875f, 0.7259887456893921f, 2.471820592880249f, -0.03836660459637642f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597694039344788f, -1.3589293530458235e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.4569058418273926f, -0.7649742364883423f, -0.12984584271907806f, -0.0001049041748046875f, 0.7639079093933105f,
		2.460334062576294f, -0.040370598435401917f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597692549228668f,
		-1.3523275583793293e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.444969892501831f, -0.8024070858955383f,
		-0.1292150467634201f, -0.0001049041748046875f, 0.8012886047363281f, 2.4483819007873535f, -0.04234614223241806f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359768956899643f, -1.3454812233248958e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.4325919151306152f, -0.8392859101295471f, -0.128560870885849f, -0.0001049041748046875f,
		0.8381160497665405f, 2.435986280441284f, -0.04429244622588158f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.1359768807888031f, -1.3384031944951857e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.419795274734497f,
		-0.8755961060523987f, -0.12788458168506622f, -0.0001049041748046875f, 0.8743756413459778f, 2.4231717586517334f,
		-0.04620874300599098f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359768509864807f, -1.3311066595633747e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.4066033363342285f, -0.9113261103630066f, -0.12718741595745087f,
		-0.0001049041748046875f, 0.9100558757781982f, 2.409961700439453f, -0.048094429075717926f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597683608531952f, -1.323604578828963e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.3930397033691406f, -0.9464655518531799f, -0.12647058069705963f, -0.0001049041748046875f, 0.9451462626457214f,
		2.396378993988037f, -0.049948930740356445f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597683608531952f,
		-1.3159101399651263e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.3791286945343018f, -0.9810042977333069f,
		-0.12573538720607758f, -0.0001049041748046875f, 0.9796367287635803f, 2.382448434829712f, -0.05177173390984535f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597680628299713f, -1.308035848524014e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.3648922443389893f, -1.0149359703063965f, -0.12498301267623901f, -0.0001049041748046875f,
		1.0135211944580078f, 2.368192195892334f, -0.05356249585747719f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597679138183594f, -1.2999951195524773e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.3503546714782715f,
		-1.0482537746429443f, -0.12421469390392303f, -0.0001049041748046875f, 1.0467925071716309f, 2.3536341190338135f,
		-0.0553208664059639f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597677648067474f, -1.2917998901684768e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.335537910461426f, -1.0809528827667236f, -0.12343166023492813f,
		-0.0001049041748046875f, 1.0794460773468018f, 2.338796854019165f, -0.05704658105969429f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597676157951355f, -1.2834628932978376e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.320464611053467f, -1.1130304336547852f, -0.12263503670692444f, -0.0001049041748046875f, 1.1114790439605713f,
		2.323702573776245f, -0.05873950198292732f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597673177719116f,
		-1.2749958386848448e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.3051564693450928f, -1.144484043121338f,
		-0.12182600796222687f, -0.0001049041748046875f, 1.1428886651992798f, 2.308373212814331f, -0.060399483889341354f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597671687602997f, -1.2664108908211347e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.289635181427002f, -1.175312876701355f, -0.12100571393966675f, -0.0001049041748046875f,
		1.1736743450164795f, 2.292829990386963f, -0.0620264932513237f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597670197486877f, -1.2577196457641548e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.273921489715576f,
		-1.2055168151855469f, -0.12017525732517242f, -0.0001049041748046875f, 1.2038363218307495f, 2.277094602584839f,
		-0.06362053006887436f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597668707370758f, -1.2489330174503266e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.258035659790039f, -1.235097885131836f, -0.11933568865060806f,
		-0.0001049041748046875f, 1.2333760261535645f, 2.261186361312866f, -0.0651816874742508f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.1359766721725464f, -1.2400616924423957e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.2419967651367188f, -1.2640583515167236f, -0.11848805099725723f, -0.0001049041748046875f, 1.262296199798584f,
		2.2451252937316895f, -0.06671009957790375f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.135976642370224f,
		-1.2311166983636213e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.2258241176605225f, -1.2924014329910278f,
		-0.11763334274291992f, -0.0001049041748046875f, 1.2905997037887573f, 2.2289299964904785f, -0.06820592284202576f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359766274690628f, -1.222107925968885e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.2095367908477783f, -1.3201302289962769f, -0.11677256226539612f, -0.0001049041748046875f,
		1.318290114402771f, 2.2126197814941406f, -0.06966933608055115f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.1359766274690628f, -1.21304469757888e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.193150758743286f,
		-1.3472518920898438f, -0.11590657383203506f, -0.0001049041748046875f, 1.3453736305236816f, 2.196211099624634f,
		-0.07110068947076797f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597659766674042f, -1.203937017635326e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.1766841411590576f, -1.3737702369689941f, -0.11503633111715317f,
		-0.0001049041748046875f, 1.3718551397323608f, 2.1797213554382324f, -0.07250022888183594f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597658276557922f, -1.194793298964214e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.1601526737213135f, -1.3996925354003906f, -0.11416265368461609f, -0.0001049041748046875f, 1.3977411985397339f,
		2.1631669998168945f, -0.0738682821393013f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597656786441803f,
		-1.1856225228257244e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.1435720920562744f, -1.4250253438949585f,
		-0.11328637599945068f, -0.0001049041748046875f, 1.4230387210845947f, 2.1465632915496826f, -0.0752052366733551f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597658276557922f, -1.1764323062379844e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.1269564628601074f, -1.4497767686843872f, -0.11240825802087784f, -0.0001049041748046875f,
		1.4477556943893433f, 2.1299245357513428f, -0.07651150226593018f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597655296325684f, -1.1672309483401477e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.1103203296661377f,
		-1.473954200744629f, -0.11152904480695724f, -0.0001049041748046875f, 1.4718992710113525f, 2.1132655143737793f,
		-0.07778748124837875f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597653806209564f, -1.1580251566556399e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.093677043914795f, -1.4975665807724f, -0.11064944416284561f,
		-0.0001049041748046875f, 1.495478868484497f, 2.0965983867645264f, -0.07903365045785904f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597652316093445f, -1.1488225482025882e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		2.0770387649536133f, -1.5206223726272583f, -0.10977014154195786f, -0.0001049041748046875f, 1.5185024738311768f,
		2.079936981201172f, -0.08025042712688446f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597650825977325f,
		-1.1396292620702297e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.060417652130127f, -1.5431311130523682f,
		-0.10889172554016113f, -0.0001049041748046875f, 1.5409798622131348f, 2.0632927417755127f, -0.081438347697258f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597650825977325f, -1.1304517784083146e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 2.043825149536133f, -1.5651018619537354f, -0.10801480710506439f, -0.0001049041748046875f,
		1.562920331954956f, 2.0466768741607666f, -0.08259787410497665f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.13597649335861206f, -1.1212958952455665e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 2.027271270751953f,
		-1.5865448713302612f, -0.1071399375796318f, -0.0001049041748046875f, 1.5843335390090942f, 2.0301003456115723f,
		-0.08372955024242401f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597647845745087f, -1.1121669558633585e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 2.0107662677764893f, -1.6074697971343994f, -0.10626767575740814f,
		-0.0001049041748046875f, 1.6052290201187134f, 2.0135722160339355f, -0.08483386784791946f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597647845745087f, -1.1030699624825502e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		1.994319200515747f, -1.6278862953186035f, -0.10539847612380981f, -0.0001049041748046875f, 1.6256171464920044f,
		1.9971022605895996f, -0.0859113484621048f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597644865512848f,
		-1.0940100310108392e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.977939486503601f, -1.647804617881775f,
		-0.10453280806541443f, -0.0001049041748046875f, 1.6455076932907104f, 1.9806995391845703f, -0.08696257323026657f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.13597643375396729f, -1.0849917089217342e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 1.9616341590881348f, -1.6672358512878418f, -0.10367108136415482f, -0.0001049041748046875f,
		1.6649117469787598f, 1.9643715620040894f, -0.08798805624246597f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.1359764188528061f, -1.076018861567718e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.9454116821289062f,
		-1.6861894130706787f, -0.1028137281537056f, -0.0001049041748046875f, 1.6838387250900269f, 1.9481263160705566f,
		-0.08898834139108658f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359764188528061f, -1.0670954679881106e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 1.9292784929275513f, -1.7046761512756348f, -0.10196111351251602f,
		-0.0001049041748046875f, 1.70229971408844f, 1.9319707155227661f, -0.08996398001909256f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.1359764188528061f, -1.058225279848557e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		1.9132413864135742f, -1.7227059602737427f, -0.10111355781555176f, -0.0001049041748046875f, 1.7203044891357422f,
		1.9159111976623535f, -0.09091552346944809f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359764039516449f,
		-1.0494113666936755e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.8973058462142944f, -1.7402896881103516f,
		-0.10027137398719788f, -0.0001049041748046875f, 1.7378637790679932f, 1.8999534845352173f, -0.09184351563453674f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359763890504837f, -1.0406569117549225e-06f, 2.5729260444641113f,
		-5.513429641723633e-07f, 1.8814783096313477f, -1.7574368715286255f, -0.09943490475416183f, -0.0001049041748046875f,
		1.7549868822097778f, 1.884103775024414f, -0.09274847060441971f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f,
		0.1359763741493225f, -1.0319645298295654e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.8657629489898682f,
		-1.7741584777832031f, -0.09860434383153915f, -0.0001049041748046875f, 1.7716853618621826f, 1.8683662414550781f,
		-0.09363096952438354f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359763741493225f, -1.023336835714872e-06f,
		2.5729260444641113f, -5.513429641723633e-07f, 1.8501641750335693f, -1.7904645204544067f, -0.09777996689081192f,
		-0.0001049041748046875f, 1.787968635559082f, 1.8527460098266602f, -0.09449154138565063f, -0.015026889741420746f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.13597635924816132f, -1.0147765578949475e-06f, 2.5729260444641113f, -5.513429641723633e-07f,
		1.8346872329711914f, -1.8063647747039795f, -0.09696201980113983f, -0.0001049041748046875f, 1.8038465976715088f,
		1.837247371673584f, -0.09533067792654037f, -0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f, 0.1359763741493225f,
		-1.0062851742986823e-06f, 2.5729260444641113f, -5.513429641723633e-07f, 1.8193351030349731f, -1.821869134902954f,
		-0.09615067392587662f, -0.0001049041748046875f, 1.8193295001983643f, 1.8218740224838257f, -0.09614893049001694f,
		-0.015026889741420746f, 0.0f, 0.0f, 0.0f, 1.0f};
	static float[][] matrix_tests =
		new float[][]{x_rotation, y_rotation, z_rotation, xy_rotation, xz_rotation, yx_rotation, yz_rotation, zx_rotation,
			zy_rotation, scale_x_rotation, scale_y_rotation, scale_z_rotation, scale_xy_rotation, scale_xz_rotation,
			scale_yx_rotation, scale_yz_rotation, scale_zx_rotation,
			scale_zy_rotation, bork};

	public Matrix3fTest() {
	}
	public static final int M00 = 0;
	public static final int M01 = 4;
	public static final int M02 = 8;
	public static final int M03 = 12;
	public static final int M10 = 1;
	public static final int M11 = 5;
	public static final int M12 = 9;
	public static final int M13 = 13;
	public static final int M20 = 2;
	public static final int M21 = 6;
	public static final int M22 = 10;
	public static final int M23 = 14;
	public static final int M30 = 3;
	public static final int M31 = 7;
	public static final int M32 = 11;
	public static final int M33 = 15;

	private static void set(Matrix4f dest, float[] src, int src_offset) {
		dest.m00 = src[src_offset + M00];
		dest.m01 = src[src_offset + M01];
		dest.m02 = src[src_offset + M02];
		dest.m03 = src[src_offset + M03];
		dest.m10 = src[src_offset + M10];
		dest.m11 = src[src_offset + M11];
		dest.m12 = src[src_offset + M12];
		dest.m13 = src[src_offset + M13];
		dest.m20 = src[src_offset + M20];
		dest.m21 = src[src_offset + M21];
		dest.m22 = src[src_offset + M22];
		dest.m23 = src[src_offset + M23];
		dest.m30 = src[src_offset + M30];
		dest.m31 = src[src_offset + M31];
		dest.m32 = src[src_offset + M32];
		dest.m33 = src[src_offset + M33];
	}

	private static void set(float dest[], int dest_offset, Matrix4f src) {
		dest[dest_offset + M00] = src.m00;
		dest[dest_offset + M01] = src.m01;
		dest[dest_offset + M02] = src.m02;
		dest[dest_offset + M03] = src.m03;
		dest[dest_offset + M10] = src.m10;
		dest[dest_offset + M11] = src.m11;
		dest[dest_offset + M12] = src.m12;
		dest[dest_offset + M13] = src.m13;
		dest[dest_offset + M20] = src.m20;
		dest[dest_offset + M21] = src.m21;
		dest[dest_offset + M22] = src.m22;
		dest[dest_offset + M23] = src.m23;
		dest[dest_offset + M30] = src.m30;
		dest[dest_offset + M31] = src.m31;
		dest[dest_offset + M32] = src.m32;
		dest[dest_offset + M33] = src.m33;
	}

	static void generate_rotation_matrices(float[] matrices, Vector3f axis) {

		Vector3f normal_axis = new Vector3f(axis);
		normal_axis.normalize();
		int count = matrices.length / 16;
		for (int i = 0; i < count; ++i) {
			Matrix4f rotate = new Matrix4f();
			rotate.setIdentity();
			float angle = (float) i / (float) (count - 1) * (2.0f * (float) Math.PI);
			rotate.set(new AxisAngle4f(normal_axis, angle));
			set(matrices, i * 16, rotate);
		}
	}

	@BeforeClass
	public static void setUpClass() {
		generate_rotation_matrices(x_rotation, new Vector3f(1.0f, 0, 0));
		generate_rotation_matrices(y_rotation, new Vector3f(0, 1.0f, 0));
		generate_rotation_matrices(z_rotation, new Vector3f(0, 0, 1.0f));
		generate_rotation_matrices(xy_rotation, new Vector3f(1.0f, 1.0f, 0));
		generate_rotation_matrices(xz_rotation, new Vector3f(1.0f, 0, 1.0f));
		generate_rotation_matrices(yx_rotation, new Vector3f(1.0f, -1.0f, 0));
		generate_rotation_matrices(yz_rotation, new Vector3f(0, -1.0f, 1.0f));
		generate_rotation_matrices(zx_rotation, new Vector3f(1.0f, 0, -1.0f));
		generate_rotation_matrices(zy_rotation, new Vector3f(0, 1.0f, -1.0f));

		generate_rotation_matrices(scale_x_rotation, new Vector3f(1.0f, 0, 0));
		generate_rotation_matrices(scale_y_rotation, new Vector3f(0, 1.0f, 0));
		generate_rotation_matrices(scale_z_rotation, new Vector3f(0, 0, 1.0f));
		generate_rotation_matrices(scale_xy_rotation, new Vector3f(1.0f, 1.0f, 0));
		generate_rotation_matrices(scale_xz_rotation, new Vector3f(1.0f, 0, 1.0f));
		generate_rotation_matrices(scale_yx_rotation, new Vector3f(1.0f, -1.0f, 0));
		generate_rotation_matrices(scale_yz_rotation, new Vector3f(0, -1.0f, 1.0f));
		generate_rotation_matrices(scale_zx_rotation, new Vector3f(1.0f, 0, -1.0f));
		generate_rotation_matrices(scale_zy_rotation, new Vector3f(0, 1.0f, -1.0f));

	}

	private static Stream<Matrix3f> stream_tests() {
		Builder<Matrix3f> builder = Stream.<Matrix3f>builder();
		Matrix4f unpack = new Matrix4f();
		for (int i_test = 0; i_test < matrix_tests.length; ++i_test) {
			for (int i = 2; i < MATRIX_COUNT; ++i) {
				set(unpack, matrix_tests[i_test], i * 16);
				builder.add(new Matrix3f(unpack));
			}
		}
		return builder.build();
	}

	@AfterClass
	public static void tearDownClass() {
	}

	/**
	 * Test of toString method, of class Matrix3f.
	 */
	@Test
	public void testToString() {
		System.out.println("toString");
		//		Matrix3f instance = new Matrix3f();
		//		String expResult = "";
		//		String result = instance.toString();
		//		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setIdentity method, of class Matrix3f.
	 */
	@Test
	public void testSetIdentity() {
		System.out.println("setIdentity");
		final Matrix3f definately_an_identity = new Matrix3f();
		definately_an_identity.m00 = 1;
		definately_an_identity.m01 = 0;
		definately_an_identity.m02 = 0;
		definately_an_identity.m10 = 0;
		definately_an_identity.m11 = 1;
		definately_an_identity.m12 = 0;
		definately_an_identity.m20 = 0;
		definately_an_identity.m21 = 0;
		definately_an_identity.m22 = 1;

		assertFalse(stream_tests()
			.peek(o -> o.setIdentity())
			.map(o -> o.equals(definately_an_identity))
			.filter(o -> !o)
			.findAny()
			.isPresent());

	}

	/**
	 * Test of setScale method, of class Matrix3f.
	 */
	@Test
	public void testSetScale() {
		System.out.println("setScale");
		stream_tests()
			.peek(o -> o.setScale((float) Math.PI))
			.map(o -> o.getScale())
			.peek(o -> assertEquals((float) Math.PI, o, 0.000001f));
	}

	/**
	 * Test of setElement method, of class Matrix3f.
	 */
	@Test
	public void testSetElement() {
		System.out.println("setElement");
		Matrix3f instance = new Matrix3f();
		stream_tests()
			.peek(o -> instance.setElement(0, 0, o.getElement(0, 0)))
			.peek(o -> assertEquals(o.getElement(0, 0), instance.getElement(0, 0), 0))
			.peek(o -> instance.setElement(0, 1, o.getElement(0, 1)))
			.peek(o -> assertEquals(o.getElement(0, 1), instance.getElement(0, 1), 0))
			.peek(o -> instance.setElement(0, 2, o.getElement(0, 2)))
			.peek(o -> assertEquals(o.getElement(0, 2), instance.getElement(0, 2), 0))
			.peek(o -> instance.setElement(1, 0, o.getElement(1, 0)))
			.peek(o -> assertEquals(o.getElement(1, 0), instance.getElement(1, 0), 0))
			.peek(o -> instance.setElement(1, 1, o.getElement(1, 1)))
			.peek(o -> assertEquals(o.getElement(1, 1), instance.getElement(1, 1), 0))
			.peek(o -> instance.setElement(1, 2, o.getElement(1, 2)))
			.peek(o -> assertEquals(o.getElement(1, 2), instance.getElement(1, 2), 0))
			.peek(o -> instance.setElement(2, 0, o.getElement(2, 0)))
			.peek(o -> assertEquals(o.getElement(2, 0), instance.getElement(2, 0), 0))
			.peek(o -> instance.setElement(2, 1, o.getElement(2, 1)))
			.peek(o -> assertEquals(o.getElement(2, 1), instance.getElement(2, 1), 0))
			.peek(o -> instance.setElement(2, 2, o.getElement(2, 2)))
			.peek(o -> assertEquals(o.getElement(2, 2), instance.getElement(2, 2), 0));

	}

	/**
	 * Test of getRow method, of class Matrix3f.
	 */
	@Test
	public void testGetRow_int_Vector3f() {
		System.out.println("getRow");
		Matrix3f instance = new Matrix3f();

		stream_tests()
			.map(o -> o.getRow(0, new Vector3f()))
			.peek(o -> instance.setRow(0, o))
			.forEach(o -> assertEquals(o, instance.getRow(0, new Vector3f())));
		stream_tests()
			.map(o -> o.getRow(1, new Vector3f()))
			.peek(o -> instance.setRow(1, o))
			.forEach(o -> assertEquals(o, instance.getRow(1, new Vector3f())));
		stream_tests()
			.map(o -> o.getRow(2, new Vector3f()))
			.peek(o -> instance.setRow(2, o))
			.forEach(o -> assertEquals(o, instance.getRow(2, new Vector3f())));

	}

	/**
	 * Test of getRow method, of class Matrix3f.
	 */
	@Test
	public void testGetRow_int_floatArr() {
		System.out.println("getRow");
		Matrix3f instance = new Matrix3f();

		stream_tests()
			.map(o -> o.getRow(0, new float[3]))
			.peek(o -> instance.setRow(0, o))
			.forEach(o -> assertArrayEquals(o, instance.getRow(0, new float[3]), 0));
		stream_tests()
			.map(o -> o.getRow(1, new float[3]))
			.peek(o -> instance.setRow(1, o))
			.forEach(o -> assertArrayEquals(o, instance.getRow(1, new float[3]), 0));
		stream_tests()
			.map(o -> o.getRow(2, new float[3]))
			.peek(o -> instance.setRow(2, o))
			.forEach(o -> assertArrayEquals(o, instance.getRow(2, new float[3]), 0));

	}

	/**
	 * Test of getColumn method, of class Matrix3f.
	 */
	@Test
	public void testGetColumn_int_Vector3f() {
		System.out.println("getColumn");
		Matrix3f instance = new Matrix3f();
		stream_tests()
			.map(o -> o.getColumn(0, new Vector3f()))
			.peek(o -> instance.setColumn(0, o))
			.forEach(o -> assertEquals(o, instance.getColumn(0, new Vector3f())));
		stream_tests()
			.map(o -> o.getColumn(1, new Vector3f()))
			.peek(o -> instance.setColumn(1, o))
			.forEach(o -> assertEquals(o, instance.getColumn(1, new Vector3f())));
		stream_tests()
			.map(o -> o.getColumn(2, new Vector3f()))
			.peek(o -> instance.setColumn(2, o))
			.forEach(o -> assertEquals(o, instance.getColumn(2, new Vector3f())));
		;
	}

	/**
	 * Test of getColumn method, of class Matrix3f.
	 */
	@Test
	public void testGetColumn_int_floatArr() {
		System.out.println("getColumn");
		Matrix3f instance = new Matrix3f();

		stream_tests()
			.map(o -> o.getColumn(0, new float[3]))
			.peek(o -> instance.setColumn(0, o))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(0, new float[3]), 0));
		stream_tests()
			.map(o -> o.getColumn(1, new float[3]))
			.peek(o -> instance.setColumn(1, o))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(1, new float[3]), 0));
		stream_tests()
			.map(o -> o.getColumn(2, new float[3]))
			.peek(o -> instance.setColumn(2, o))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(2, new float[3]), 0));
	}

	/**
	 * Test of getElement method, of class Matrix3f.
	 */
	@Test
	public void testGetElement() {
		System.out.println("getElement");
		stream_tests()
			.forEach(o -> {
				assertEquals(o.getElement(0, 0), o.m00, 0);
				assertEquals(o.getElement(0, 1), o.m01, 0);
				assertEquals(o.getElement(0, 2), o.m02, 0);
				assertEquals(o.getElement(1, 0), o.m10, 0);
				assertEquals(o.getElement(1, 1), o.m11, 0);
				assertEquals(o.getElement(1, 2), o.m12, 0);
				assertEquals(o.getElement(2, 0), o.m20, 0);
				assertEquals(o.getElement(2, 1), o.m21, 0);
				assertEquals(o.getElement(2, 2), o.m22, 0);
			});
	}

	/**
	 * Test of setRow method, of class Matrix3f.
	 */
	@Test
	public void testSetRow_4args() {
		System.out.println("setRow");
		Matrix3f instance = new Matrix3f();

		stream_tests()
			.map(o -> o.getRow(0, new Vector3f()))
			.peek(o -> instance.setRow(0, o.x, o.y, o.z))
			.forEach(o -> assertEquals(o, instance.getRow(0, new Vector3f())));
		stream_tests()
			.map(o -> o.getRow(1, new Vector3f()))
			.peek(o -> instance.setRow(1, o.x, o.y, o.z))
			.forEach(o -> assertEquals(o, instance.getRow(1, new Vector3f())));
		stream_tests()
			.map(o -> o.getRow(2, new Vector3f()))
			.peek(o -> instance.setRow(2, o.x, o.y, o.z))
			.forEach(o -> assertEquals(o, instance.getRow(2, new Vector3f())));

	}

	/**
	 * Test of setRow method, of class Matrix3f.
	 */
	@Test
	public void testSetRow_int_Vector3f() {
		System.out.println("setRow");
		Matrix3f instance = new Matrix3f();
		stream_tests()
			.map(o -> o.getRow(0, new float[3]))
			.peek(o -> instance.setRow(0, o[0], o[1], o[2]))
			.forEach(o -> assertArrayEquals(o, instance.getRow(0, new float[3]), 0));
		stream_tests()
			.map(o -> o.getRow(1, new float[3]))
			.peek(o -> instance.setRow(1, o[0], o[1], o[2]))
			.forEach(o -> assertArrayEquals(o, instance.getRow(1, new float[3]), 0));
		stream_tests()
			.map(o -> o.getRow(2, new float[3]))
			.peek(o -> instance.setRow(2, o[0], o[1], o[2]))
			.forEach(o -> assertArrayEquals(o, instance.getRow(2, new float[3]), 0));

	}

	/**
	 * Test of setRow method, of class Matrix3f.
	 */
	@Test
	public void testSetRow_int_floatArr() {
		System.out.println("setRow");
		Matrix3f instance = new Matrix3f();
		stream_tests()
			.map(o -> o.getRow(0, new float[3]))
			.peek(o -> instance.setRow(0, o))
			.forEach(o -> assertArrayEquals(o, instance.getRow(0, new float[3]), 0));
		stream_tests()
			.map(o -> o.getRow(1, new float[3]))
			.peek(o -> instance.setRow(1, o))
			.forEach(o -> assertArrayEquals(o, instance.getRow(1, new float[3]), 0));
		stream_tests()
			.map(o -> o.getRow(2, new float[3]))
			.peek(o -> instance.setRow(2, o))
			.forEach(o -> assertArrayEquals(o, instance.getRow(2, new float[3]), 0));

	}

	/**
	 * Test of setColumn method, of class Matrix3f.
	 */
	@Test
	public void testSetColumn_4args() {
		System.out.println("setColumn");
		Matrix3f instance = new Matrix3f();
		stream_tests()
			.map(o -> o.getColumn(0, new float[3]))
			.peek(o -> instance.setColumn(0, o[0], o[1], o[2]))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(0, new float[3]), 0));
		stream_tests()
			.map(o -> o.getColumn(1, new float[3]))
			.peek(o -> instance.setColumn(1, o[0], o[1], o[2]))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(1, new float[3]), 0));
		stream_tests()
			.map(o -> o.getColumn(2, new float[3]))
			.peek(o -> instance.setColumn(2, o[0], o[1], o[2]))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(2, new float[3]), 0));

	}

	/**
	 * Test of setColumn method, of class Matrix3f.
	 */
	@Test
	public void testSetColumn_int_Vector3f() {
		System.out.println("setColumn");
		Matrix3f instance = new Matrix3f();
		stream_tests()
			.map(o -> o.getColumn(0, new Vector3f()))
			.peek(o -> instance.setColumn(0, o))
			.forEach(o -> assertEquals(o, instance.getColumn(0, new Vector3f())));
		stream_tests()
			.map(o -> o.getColumn(1, new Vector3f()))
			.peek(o -> instance.setColumn(1, o))
			.forEach(o -> assertEquals(o, instance.getColumn(1, new Vector3f())));
		stream_tests()
			.map(o -> o.getColumn(2, new Vector3f()))
			.peek(o -> instance.setColumn(2, o))
			.forEach(o -> assertEquals(o, instance.getColumn(2, new Vector3f())));

	}

	/**
	 * Test of setColumn method, of class Matrix3f.
	 */
	@Test
	public void testSetColumn_int_floatArr() {
		System.out.println("setColumn");
		Matrix3f instance = new Matrix3f();
		stream_tests()
			.map(o -> o.getColumn(0, new float[3]))
			.peek(o -> instance.setColumn(0, o))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(0, new float[3]), 0));
		stream_tests()
			.map(o -> o.getColumn(1, new float[3]))
			.peek(o -> instance.setColumn(1, o))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(1, new float[3]), 0));
		stream_tests()
			.map(o -> o.getColumn(2, new float[3]))
			.peek(o -> instance.setColumn(2, o))
			.forEach(o -> assertArrayEquals(o, instance.getColumn(2, new float[3]), 0));

	}

	/**
	 * Test of getScale method, of class Matrix3f.
	 */
	@Test
	public void testGetScale_0args() {
		System.out.println("getScale");
//		Matrix3f instance = new Matrix3f();
//		instance.setIdentity();
//		Matrix3f rotate = new Matrix3f();
//		Vector3f scale = new Vector3f();
//		instance.getScaleRotate(scale, rotate);
//		System.out.println(rotate.toString());
//		System.out.println(scale.toString());
//		float x = instance.getScale();
//		instance.setScale(-1);
//		instance.getScaleRotate(scale, rotate);
//		System.out.println(rotate.toString());
//		System.out.println(scale.toString());
//		float y = instance.getScale();
//		System.out.println(x +" "+y);
//		
		stream_tests()
			.peek(o -> o.setScale((float) Math.PI))
			.forEach(o -> assertEquals((float) Math.PI, o.getScale(), 0.000001f));
		stream_tests()
			.peek(o -> o.setScale(-(float) Math.PI))
			.forEach(o -> assertEquals((float) Math.PI, o.getScale(), 0.000001f));
	}

	/**
	 * Test of getScale method, of class Matrix3f.
	 */
	@Test
	public void testGetScale_Vector3f() {
		System.out.println("getScale");

		{
			float x = (float) Math.PI;
			float y = (float) Math.PI;
			float z = (float) Math.PI;
			stream_tests()
				.peek(o -> o.setScale(x, y, z))
				.map(o -> o.getScale(new Vector3f()))
				.peek(o -> assertEquals(Math.abs(x), o.x, 0.000001f))
				.peek(o -> assertEquals(Math.abs(y), o.y, 0.000001f))
				.peek(o -> assertEquals(Math.abs(z), o.z, 0.000001f))
				.forEach(o -> {
				});
		}
		{
			float x = -(float) Math.PI;
			float y = (float) Math.PI;
			float z = (float) Math.PI;
			stream_tests()
				.peek(o -> o.setScale(x, y, z))
				.map(o -> o.getScale(new Vector3f()))
				.peek(o -> assertEquals(Math.abs(x), o.x, 0.000001f))
				.peek(o -> assertEquals(Math.abs(y), o.y, 0.000001f))
				.peek(o -> assertEquals(Math.abs(z), o.z, 0.000001f))
				.forEach(o -> {
				});
		}
		{
			float x = (float) Math.PI;
			float y = -(float) Math.PI;
			float z = (float) Math.PI;
			stream_tests()
				.peek(o -> o.setScale(x, y, z))
				.map(o -> o.getScale(new Vector3f()))
				.peek(o -> assertEquals(Math.abs(x), o.x, 0.000001f))
				.peek(o -> assertEquals(Math.abs(y), o.y, 0.000001f))
				.peek(o -> assertEquals(Math.abs(z), o.z, 0.000001f))
				.forEach(o -> {
				});
		}
		{
			float x = (float) Math.PI;
			float y = (float) Math.PI;
			float z = -(float) Math.PI;
			stream_tests()
				.peek(o -> o.setScale(x, y, z))
				.map(o -> o.getScale(new Vector3f()))
				.peek(o -> assertEquals(Math.abs(x), o.x, 0.000001f))
				.peek(o -> assertEquals(Math.abs(y), o.y, 0.000001f))
				.peek(o -> assertEquals(Math.abs(z), o.z, 0.000001f))
				.forEach(o -> {
				});
		}
	}

	/**
	 * Test of add method, of class Matrix3f.
	 */
	@Test
	public void testAdd_float() {
		System.out.println("add");
		//		float scalar = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.add(scalar);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of add method, of class Matrix3f.
	 */
	@Test
	public void testAdd_float_Matrix3f() {
		System.out.println("add");
		//		float scalar = 0.0F;
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.add(scalar, m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of add method, of class Matrix3f.
	 */
	@Test
	public void testAdd_Matrix3f_Matrix3f() {
		System.out.println("add");
		//		Matrix3f m1 = null;
		//		Matrix3f m2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.add(m1, m2);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of add method, of class Matrix3f.
	 */
	@Test
	public void testAdd_Matrix3f() {
		System.out.println("add");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.add(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of sub method, of class Matrix3f.
	 */
	@Test
	public void testSub_Matrix3f_Matrix3f() {
		System.out.println("sub");
		//		Matrix3f m1 = null;
		//		Matrix3f m2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.sub(m1, m2);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of sub method, of class Matrix3f.
	 */
	@Test
	public void testSub_Matrix3f() {
		System.out.println("sub");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.sub(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of transpose method, of class Matrix3f.
	 */
	@Test
	public void testTranspose_0args() {
		System.out.println("transpose");
		//		Matrix3f instance = new Matrix3f();
		//		instance.transpose();
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of transpose method, of class Matrix3f.
	 */
	@Test
	public void testTranspose_Matrix3f() {
		System.out.println("transpose");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.transpose(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of set method, of class Matrix3f.
	 */
	@Test
	public void testSet_Quat4f() {
		System.out.println("set");
		List<List> quats = stream_tests()
			.map(o -> o.normalize())
			.map(o -> Arrays.asList(
				new Quat4f().set(o),
				new Quat4f().set(o).scale(-1.0f),
				o
			))
			.collect(Collectors.toList());
		for (List quat : quats) {
			Matrix3f m1 = new Matrix3f();
			m1.set((Quat4f) quat.get(0));
			Matrix3f m2 = new Matrix3f();
			m2.set((Quat4f) quat.get(1));
			Matrix3f instance = (Matrix3f) quat.get(2);
			assertTrue(instance.epsilonEquals(m1, 0.00001f) || instance.epsilonEquals(m2, 0.00001f));
		}

	}

	/**
	 * Test of set method, of class Matrix3f.
	 */
	@Test
	public void testSet_AxisAngle4f() {
		System.out.println("set");
		//		AxisAngle4f a1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.set(a1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of set method, of class Matrix3f.
	 */
	@Test
	public void testSet_floatArr() {
		System.out.println("set");
		//		float[] m = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.set(m);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of set method, of class Matrix3f.
	 */
	@Test
	public void testSet_Matrix3f() {
		System.out.println("set");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.set(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of set method, of class Matrix3f.
	 */
	@Test
	public void testSet_Matrix4f() {
		System.out.println("set");
		//		Matrix4f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.set(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of invert method, of class Matrix3f.
	 */
	@Test
	public void testInvert_Matrix3f() {
		System.out.println("invert");
		final Matrix3f definately_an_identity = new Matrix3f();
		definately_an_identity.m00 = 1;
		definately_an_identity.m01 = 0;
		definately_an_identity.m02 = 0;
		definately_an_identity.m10 = 0;
		definately_an_identity.m11 = 1;
		definately_an_identity.m12 = 0;
		definately_an_identity.m20 = 0;
		definately_an_identity.m21 = 0;
		definately_an_identity.m22 = 1;

		stream_tests()
			.map(o -> (List<Matrix3f>) Arrays.asList(o, new Matrix3f(o), new Matrix3f().invert(o)))
			/*
			 * ensure original matrix wasn' modified
			 */
			.peek(o -> assertEquals(o.get(0), o.get(1)))
			/**
			 * AA' should be the identiy matrix
			 */
			.map(o -> new Matrix3f().mul(o.get(0), o.get(2)))
			.forEach(o -> assertTrue(definately_an_identity.epsilonEquals(o, 0.000001f)));

	}

	/**
	 * Test of invert method, of class Matrix3f.
	 */
	@Test
	public void testInvert_0args() {
		System.out.println("invert");
		final Matrix3f definately_an_identity = new Matrix3f();
		definately_an_identity.m00 = 1;
		definately_an_identity.m01 = 0;
		definately_an_identity.m02 = 0;
		definately_an_identity.m10 = 0;
		definately_an_identity.m11 = 1;
		definately_an_identity.m12 = 0;
		definately_an_identity.m20 = 0;
		definately_an_identity.m21 = 0;
		definately_an_identity.m22 = 1;

		/*
		 * AA' should be the identiy matrix
		 *
		 */
		stream_tests()
			.map(o -> (List<Matrix3f>) Arrays.asList(o, new Matrix3f(o).invert()))
			.map(o -> new Matrix3f().mul(o.get(0), o.get(1)))
			.forEach(o -> assertTrue(definately_an_identity.epsilonEquals(o, 0.000001f)));

	}

	/**
	 * Test of determinant method, of class Matrix3f.
	 */
	@Test
	public void testDeterminant() {
		System.out.println("determinant");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.determinant();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of set method, of class Matrix3f.
	 */
	@Test
	public void testSet_float() {
		System.out.println("set");
		//		float scale = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.set(scale);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of rotX method, of class Matrix3f.
	 */
	@Test
	public void testRotX() {
		System.out.println("rotX");
		//		float angle = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.rotX(angle);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of rotY method, of class Matrix3f.
	 */
	@Test
	public void testRotY() {
		System.out.println("rotY");
		//		float angle = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.rotY(angle);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of rotZ method, of class Matrix3f.
	 */
	@Test
	public void testRotZ() {
		System.out.println("rotZ");
		//		float angle = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.rotZ(angle);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mul method, of class Matrix3f.
	 */
	@Test
	public void testMul_float() {
		System.out.println("mul");
		//		float scalar = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mul(scalar);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mul method, of class Matrix3f.
	 */
	@Test
	public void testMul_float_Matrix3f() {
		System.out.println("mul");
		//		float scalar = 0.0F;
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mul(scalar, m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mul method, of class Matrix3f.
	 */
	@Test
	public void testMul_Matrix3f() {
		System.out.println("mul");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mul(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mul method, of class Matrix3f.
	 */
	@Test
	public void testMul_Matrix3f_Matrix3f() {
		System.out.println("mul");
		//		Matrix3f m1 = null;
		//		Matrix3f m2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mul(m1, m2);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mulNormalize method, of class Matrix3f.
	 */
	@Test
	public void testMulNormalize_Matrix3f() {
		System.out.println("mulNormalize");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mulNormalize(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mulNormalize method, of class Matrix3f.
	 */
	@Test
	public void testMulNormalize_Matrix3f_Matrix3f() {
		System.out.println("mulNormalize");
		//		Matrix3f m1 = null;
		//		Matrix3f m2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mulNormalize(m1, m2);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mulTransposeBoth method, of class Matrix3f.
	 */
	@Test
	public void testMulTransposeBoth() {
		System.out.println("mulTransposeBoth");
		//		Matrix3f m1 = null;
		//		Matrix3f m2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mulTransposeBoth(m1, m2);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mulTransposeRight method, of class Matrix3f.
	 */
	@Test
	public void testMulTransposeRight() {
		System.out.println("mulTransposeRight");
		//		Matrix3f m1 = null;
		//		Matrix3f m2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mulTransposeRight(m1, m2);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of mulTransposeLeft method, of class Matrix3f.
	 */
	@Test
	public void testMulTransposeLeft() {
		System.out.println("mulTransposeLeft");
		//		Matrix3f m1 = null;
		//		Matrix3f m2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.mulTransposeLeft(m1, m2);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of normalize method, of class Matrix3f.
	 */
	@Test
	public void testNormalize_0args() {
		System.out.println("normalize");
		//		Matrix3f instance = new Matrix3f();
		//		instance.normalize();
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of normalize method, of class Matrix3f.
	 */
	@Test
	public void testNormalize_Matrix3f() {
		System.out.println("normalize");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.normalize(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of normalizeCP method, of class Matrix3f.
	 */
	@Test
	public void testNormalizeCP_0args() {
		System.out.println("normalizeCP");
		//		Matrix3f instance = new Matrix3f();
		//		instance.normalizeCP();
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of normalizeCP method, of class Matrix3f.
	 */
	@Test
	public void testNormalizeCP_Matrix3f() {
		System.out.println("normalizeCP");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.normalizeCP(m1);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of equals method, of class Matrix3f.
	 */
	@Test
	public void testEquals_Matrix3f() {
		System.out.println("equals");
		//		Matrix3f m1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		boolean expResult = false;
		//		boolean result = instance.equals(m1);
		//		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of equals method, of class Matrix3f.
	 */
	@Test
	public void testEquals_Object() {
		System.out.println("equals");
		//		Object o1 = null;
		//		Matrix3f instance = new Matrix3f();
		//		boolean expResult = false;
		//		boolean result = instance.equals(o1);
		//		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of epsilonEquals method, of class Matrix3f.
	 */
	@Test
	public void testEpsilonEquals() {
		System.out.println("epsilonEquals");
		//		Matrix3f m1 = null;
		//		float epsilon = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		boolean expResult = false;
		//		boolean result = instance.epsilonEquals(m1, epsilon);
		//		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of hashCode method, of class Matrix3f.
	 */
	@Test
	public void testHashCode() {
		//		System.out.println("hashCode");
		//		Matrix3f instance = new Matrix3f();
		//		int expResult = 0;
		//		int result = instance.hashCode();
		//		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setZero method, of class Matrix3f.
	 */
	@Test
	public void testSetZero() {
		//		System.out.println("setZero");
		//		Matrix3f instance = new Matrix3f();
		//		instance.setZero();
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of negate method, of class Matrix3f.
	 */
	@Test
	public void testNegate_0args() {
		//		System.out.println("negate");
		//		Matrix3f instance = new Matrix3f();
		//		instance.negate();
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of negate method, of class Matrix3f.
	 */
	@Test
	public void testNegate_Matrix3f() {
		System.out.println("negate");
//		Matrix3f m1 = null;
//		Matrix3f instance = new Matrix3f();
//		instance.negate(m1);
		// TODO review the generated test code and remove the default call to fail.

	}

	/**
	 * Test of transform method, of class Matrix3f.
	 */
	@Test
	public void testTransform_Tuple3f() {
		System.out.println("transform");
		//		Tuple3f t = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.transform(t);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of transform method, of class Matrix3f.
	 */
	@Test
	public void testTransform_Tuple3f_Tuple3f() {
		System.out.println("transform");
		//		Tuple3f t = null;
		//		Tuple3f result_2 = null;
		//		Matrix3f instance = new Matrix3f();
		//		instance.transform(t, result_2);
		// TODO review the generated test code and remove the default call to fail.

	}

	/**
	 * Test of getScaleRotate method, of class Matrix3f.
	 */
	@Test
	public void testGetScaleRotate_Vector3f_Matrix3f() {
		System.out.println("getScaleRotate");
		Vector3f scale = new Vector3f();
		Matrix3f rotate = new Matrix3f();
		Matrix3f instance = new Matrix3f();
		Matrix4f unpack = new Matrix4f();
		Matrix3f recomp = new Matrix3f();
		Matrix3f diag_scale = new Matrix3f();

		for (int i_test = 0; i_test < matrix_tests.length; ++i_test) {
			for (int i = 2; i < MATRIX_COUNT; ++i) {
				set(unpack, matrix_tests[i_test], i * 16);
				/*
				 * decompose and recompose the matrix
				 *
				 */
				instance.set(unpack);
				instance.getScaleRotate(scale, rotate);
				recomp.set(rotate);
				diag_scale.setDiagonal(scale);
				recomp.mul(diag_scale);
				if (!instance.epsilonEquals(recomp, 0.00001f)) {
					System.out.println(instance.toString().concat(" != "));
					System.out.println(recomp.toString());
					assertTrue(false);
				}
			}
		}
	}

	/**
	 * Test of getScaleRotate method, of class Matrix3f.
	 */
	@Test
	public void testGetScaleRotate_3args() {
		System.out.println("getScaleRotate");
		//		Matrix3f m1 = null;
		//		Vector3f scale = null;
		//		Matrix3f rotate = null;
		//		Matrix3f.getScaleRotate(m1, scale, rotate);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of clone method, of class Matrix3f.
	 */
	@Test
	public void testClone() {
		System.out.println("clone");
		//		Matrix3f instance = new Matrix3f();
		//		Object expResult = null;
		//		Object result = instance.clone();
		//		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM00 method, of class Matrix3f.
	 */
	@Test
	public void testGetM00() {
		System.out.println("getM00");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM00();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM00 method, of class Matrix3f.
	 */
	@Test
	public void testSetM00() {
		System.out.println("setM00");
		//		float m00 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM00(m00);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM01 method, of class Matrix3f.
	 */
	@Test
	public void testGetM01() {
		System.out.println("getM01");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM01();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM01 method, of class Matrix3f.
	 */
	@Test
	public void testSetM01() {
		System.out.println("setM01");
		//		float m01 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM01(m01);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM02 method, of class Matrix3f.
	 */
	@Test
	public void testGetM02() {
		System.out.println("getM02");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM02();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM02 method, of class Matrix3f.
	 */
	@Test
	public void testSetM02() {
		System.out.println("setM02");
		//		float m02 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM02(m02);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM10 method, of class Matrix3f.
	 */
	@Test
	public void testGetM10() {
		System.out.println("getM10");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM10();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM10 method, of class Matrix3f.
	 */
	@Test
	public void testSetM10() {
		System.out.println("setM10");
		//		float m10 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM10(m10);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM11 method, of class Matrix3f.
	 */
	@Test
	public void testGetM11() {
		System.out.println("getM11");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM11();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM11 method, of class Matrix3f.
	 */
	@Test
	public void testSetM11() {
		System.out.println("setM11");
		//		float m11 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM11(m11);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM12 method, of class Matrix3f.
	 */
	@Test
	public void testGetM12() {
		System.out.println("getM12");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM12();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM12 method, of class Matrix3f.
	 */
	@Test
	public void testSetM12() {
		System.out.println("setM12");
		//		float m12 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM12(m12);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM20 method, of class Matrix3f.
	 */
	@Test
	public void testGetM20() {
		System.out.println("getM20");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM20();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM20 method, of class Matrix3f.
	 */
	@Test
	public void testSetM20() {
		System.out.println("setM20");
		//		float m20 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM20(m20);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM21 method, of class Matrix3f.
	 */
	@Test
	public void testGetM21() {
		System.out.println("getM21");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM21();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM21 method, of class Matrix3f.
	 */
	@Test
	public void testSetM21() {
		System.out.println("setM21");
		//		float m21 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM21(m21);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of getM22 method, of class Matrix3f.
	 */
	@Test
	public void testGetM22() {
		System.out.println("getM22");
		//		Matrix3f instance = new Matrix3f();
		//		float expResult = 0.0F;
		//		float result = instance.getM22();
		//		assertEquals(expResult, result, 0.0);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setM22 method, of class Matrix3f.
	 */
	@Test
	public void testSetM22() {
		System.out.println("setM22");
		//		float m22 = 0.0F;
		//		Matrix3f instance = new Matrix3f();
		//		instance.setM22(m22);
		// TODO review the generated test code and remove the default call to fail.
		;
	}

	/**
	 * Test of setDiagonal method, of class Matrix3f.
	 */
	@Test
	public void testSetDiagonal() {
		System.out.println("setDiagonal");

	}

}
